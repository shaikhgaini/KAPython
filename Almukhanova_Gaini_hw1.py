#!/usr/bin/env python
# coding: utf-8

# In[50]:


import math as m


# ## Задание 1:
# Дано неотрицательное целое число. 
# Найдите число десятков в его десятичной записи (то есть вторую справа цифру его десятичной записи).
# ### Входные данные
# Вводится неотрицательное целое число.
# ### Выходные данные
# Выведите ответ на задачу.
# #### Примеры
# Входные данные
# 179
# 
# Выходные данные
# 7
# 

# In[51]:


a = int(input()) #вводим число

res = a // 10 % 10 #получаем число десятков
print (res) #выводим результат


# ## Задание 2:
# N школьников делят K яблок поровну, неделящийся остаток остается в корзинке. 
# Сколько яблок достанется каждому школьнику?
# #### Входные данные
# Программа получает на вход числа N и K.
# #### Выходные данные
# Программа должна вывести искомое количество яблок.
# 
# #### Примеры
# Входные данные
# 3
# 14
# 
# Выходные данные
# 4
# 

# In[52]:


n = int(input()) # число школьников
k = int(input()) # число яблок

res = k // n # целое кол-во яблок на каждого школьника
print(res)


# ## Задание 3:
# Поле шахматной доски определяется парой чисел (a, b), каждое от 1 до 8, первое число задает номер столбца, второе – номер строки. Заданы две клетки. Определите, может ли шахматный король попасть с первой клетки на вторую за один ход.
# ##### Входные данные
# Даны 4 целых числа от 1 до 8 каждое, первые два задают начальную клетку, вторые два задают конечную клетку. Начальная и конечная клетки не совпадают. Числа записаны в отдельных строках.
# ##### Выходные данные
# Программа должна вывести YES, если из первой клетки ходом короля можно попасть во вторую, или NO в противном случае.
# #### Примеры
# Входные данные
# 4
# 4
# 5
# 5
# 
# Выходные данные
# YES
# 

# In[53]:


# вводим координаты двух точек на доске
coordinate_1 = int(input())
coordinate_2 = int(input())
coordinate_3 = int(input())
coordinate_4 = int(input())


# In[54]:


# вариант решения 1
if (coordinate_3 == coordinate_1 + 1 and coordinate_4 == coordinate_2 - 1) or\
    (coordinate_3 == coordinate_1 + 1 and coordinate_4 == coordinate_2) or \
    (coordinate_3 == coordinate_1 + 1 and coordinate_4 == coordinate_2 + 1) or \
    (coordinate_3 == coordinate_1 and coordinate_4 == coordinate_2 - 1) or \
    (coordinate_3 == coordinate_1 and coordinate_4 == coordinate_2 + 1) or \
    (coordinate_3 == coordinate_1 - 1 and coordinate_4 == coordinate_2 - 1) or \
    (coordinate_3 == coordinate_1 - 1 and coordinate_4 == coordinate_2) or \
    (coordinate_3 == coordinate_1 - 1 and coordinate_4 == coordinate_2 + 1):
    print ('YES')
else:
    print('NO')


# In[55]:


# вариант решения 2
if (abs(coordinate_3 - coordinate_1) <= 1 and abs(coordinate_4 - coordinate_2)):
    print('YES')
else:
    print('NO')


# ## Задание 4:
# Дано число n. С начала суток прошло n минут. Определите, сколько часов и минут будут показывать электронные часы в этот момент. Программа должна вывести два числа: количество часов (от 0 до 23) и количество минут (от 0 до 59). Учтите, что число n может быть больше, чем количество минут в сутках.
# #### Входные данные
# Вводится целое число n.
# #### Выходные данные
# Выведите ответ на задачу.
# 
# #### Примеры
# Входные данные
# 150
# 
# Выходные данные
# 2 30
# 
# Входные данные
# 1441
# 
# Выходные данные
# 0 1
# 

# In[56]:


n = int(input()) #вводим кол-во минут

#если это меньше чем сутки, то просто берем целое кол-во часов и минут
if n // 60 <= 23: 
    hours = n // 60
    minutes = n % 60
    
#если это больше чем сутки, то берем часы не учитывая прошедшие сутки и оставшиеся минуты
elif n//60 > 23:
    hours = n // 60 - 24*((n // 60)/24)
    minutes = n % 60
    
#выводим результат
print(int(hours), minutes)


# ## Задание 5
# Электронные часы показывают время в формате h:mm:ss, то есть сначала записывается количество часов, потом обязательно двузначное количество минут, затем обязательно двузначное количество секунд. Количество минут и секунд при необходимости дополняются до двузначного числа нулями.
# С начала суток прошло n секунд. Выведите, что покажут часы.
# 
# #### Входные данные
# Вводится целое число n.
# #### Выходные данные
# Выведите ответ на задачу, соблюдая требуемый формат.
# 
# #### Примеры
# Входные данные
# 3602
# 
# Выходные данные
# 1:00:02
# 
# Входные данные
# 129700
# 
# Выходные данные
# 12:01:40
# 

# In[57]:


n = int(input()) # вводим кол-во секунд

hours = n // 3600 % 24
minutes = n // 3600 // 60 // 10 
minutes_2 = n % 3600 // 60 % 10
seconds = n % 60 // 10
seconds_2 = n % 60 % 10

print(hours,':',str(minutes) + str(minutes_2), ':', str(seconds) + str(seconds_2))


# In[58]:


n = int(input()) # вводим кол-во секунд

hours = n // 3600 % 24
minutes = n // 3600 // 60 // 10 
minutes_2 = n % 3600 // 60 % 10
seconds = n % 60 // 10
seconds_2 = n % 60 % 10

print(f"{hours}:{minutes}{minutes_2}:{seconds}{seconds_2}")


# ## Задание 6
# Улитка ползёт по вертикальному шесту высотой h метров, поднимаясь за день на a метров, а за ночь спускаясь на b метров. На какой день улитка доползёт до вершины шеста?
# #### Входные данные
# Программа получает на вход натуральные числа h, a, b. Гарантируется, что a>b.
# #### Выходные данные
# Программа должна вывести одно натуральное число.
# ##### Примечание
# При решении этой задачи нельзя пользоваться условной инструкцией if и циклами.
# 
# #### Примеры
# 
# Входные данные
# 10
# 3
# 2
# 
# Выходные данные
# 8
# 
# 
# Входные данные
# 20
# 7
# 3
# 
# Выходные данные
# 5
# 

# In[59]:


#вводим данные высоты и метров подъема и спуска
h = int(input())
a = int(input())
b = int(input())

## up = a * days на сколько поднимется за определенное кол-во дней
## down = b * (days - 1) на сколько спустится за дни до того, когда дойдет до нужной высоты
## (a * days - (b * (days - 1))) 
## a * days - b * days + b
## days * (a - b) + b
## (h - b)/(a - b)


days = (h - b)/(a - b) #считаем кол-во необходимых дней для этой высоты
print(m.ceil(days)) # выводим округленное целое число дней


# In[ ]:




